// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces/interfaces.go -destination=mocks/mock_interfaces.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "test-ozon-2/models"

	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// LogError mocks base method.
func (m *MockLogger) LogError(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", message)
}

// LogError indicates an expected call of LogError.
func (mr *MockLoggerMockRecorder) LogError(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockLogger)(nil).LogError), message)
}

// LogInfo mocks base method.
func (m *MockLogger) LogInfo(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInfo", message)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockLoggerMockRecorder) LogInfo(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockLogger)(nil).LogInfo), message)
}

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// WriteToDatabase mocks base method.
func (m *MockDatabase) WriteToDatabase(doc models.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToDatabase", doc)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteToDatabase indicates an expected call of WriteToDatabase.
func (mr *MockDatabaseMockRecorder) WriteToDatabase(doc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToDatabase", reflect.TypeOf((*MockDatabase)(nil).WriteToDatabase), doc)
}
